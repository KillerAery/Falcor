from falcor import *

def WindowsPath(s):
    return ("C:/Project/Falcor/Media/") + s

def render_graph_SSSRenderGraph():
    g = RenderGraph('SSSRenderGraph')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('BSSRDFPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SDFEditor.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('Utils.dll')
    RoughnessTexture = createPass('ImageLoader', {'outputSize': IOSize.Default, 'filename': WindowsPath('Yuri/FaceRoughness_MAIN.BMP'), 'mips': False, 'srgb': False, 'arrayIndex': 0, 'mipLevel': 0})
    g.addPass(RoughnessTexture, 'RoughnessTexture')
    BSSRDFPass = createPass('BSSRDFPass', {'uScale': 1.0, 'vScale': 1.0, 'd': 1.0})
    g.addPass(BSSRDFPass, 'BSSRDFPass')
    AlbedoTexture = createPass('ImageLoader', {'outputSize': IOSize.Default, 'filename': WindowsPath('Yuri/FaceColor_MAIN.HDR'), 'mips': False, 'srgb': True, 'arrayIndex': 0, 'mipLevel': 0})
    g.addPass(AlbedoTexture, 'AlbedoTexture')
    DepthPass = createPass('DepthPass', {'depthFormat': ResourceFormat.D32Float, 'useAlphaTest': True})
    g.addPass(DepthPass, 'DepthPass')
    CavityTexture = createPass('ImageLoader', {'outputSize': IOSize.Default, 'filename': WindowsPath('Yuri/FaceCavity_MAIN.BMP'), 'mips': False, 'srgb': False, 'arrayIndex': 0, 'mipLevel': 0})
    g.addPass(CavityTexture, 'CavityTexture')
    CSM = createPass('CSM', {'mapSize': uint2(2048,2048), 'visibilityBufferSize': uint2(0,0), 'cascadeCount': 8, 'visibilityMapBitsPerChannel': 32, 'kSdsmReadbackLatency': 1, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(CSM, 'CSM')
    NormalTexture = createPass('ImageLoader', {'outputSize': IOSize.Default, 'filename': WindowsPath('Yuri/FaceNormal_MAIN.BMP'), 'mips': False, 'srgb': False, 'arrayIndex': 0, 'mipLevel': 0})
    g.addPass(NormalTexture, 'NormalTexture')
    g.addEdge('DepthPass.depth', 'CSM.depth')
    g.addEdge('CSM.visibility', 'BSSRDFPass.visBuffer')
    g.addEdge('AlbedoTexture.dst', 'BSSRDFPass.texAlbedo')
    g.addEdge('RoughnessTexture.dst', 'BSSRDFPass.texRoughness')
    g.addEdge('CavityTexture.dst', 'BSSRDFPass.texCavity')
    g.addEdge('NormalTexture.dst', 'BSSRDFPass.texNormal')
    g.addEdge('DepthPass.depth', 'BSSRDFPass.depthBuffer')
    g.markOutput('BSSRDFPass.dst')
    return g

SSSRenderGraph = render_graph_SSSRenderGraph()
try: m.addGraph(SSSRenderGraph)
except NameError: None
